@using System.Timers;

<div class="text" style="@textStyle" @onclick="StartTimeout">
    @remainingTimeout
</div>

@code {
    private const string TimeoutPlaceholder = "TIME OUT";
    private const string StylesWhenNoTimeout = "cursor: pointer;";
    private const string StylesWhenTimeout = "";

    private Timer? timer;
    private byte minutes = 1;
    private byte seconds = 0;
    private string remainingTimeout = TimeoutPlaceholder;
    private string textStyle = StylesWhenNoTimeout;

    [Parameter]
    public EventCallback OnTimeoutEnded { get; set; }

    protected override void OnInitialized()
    {
        timer = new Timer(1000);
        timer.AutoReset = true;
        timer.Enabled = false;
        timer.Elapsed += SecondPassed;
    }

    private async void SecondPassed(Object? source, ElapsedEventArgs e)
    {
        SubtractSecond();
        remainingTimeout = $"{minutes.ToPaddedString()}:{seconds.ToPaddedString()}";
        if (minutes == 0 && seconds == 0)
        {
            timer!.Enabled = false;            
            remainingTimeout = TimeoutPlaceholder;
            textStyle = StylesWhenNoTimeout;
            minutes = 1;
            await OnTimeoutEnded.InvokeAsync();
        }
        StateHasChanged();
    }

    private void SubtractSecond()
    {
        if (seconds > 0) seconds--;
        else if (minutes > 0)
        {
            SubtractMinute();
            seconds = 59;
        }
    }

    private void SubtractMinute()
    {
        if (minutes > 0) minutes--;
    }

    private void StartTimeout()
    {
        textStyle = StylesWhenTimeout;
        remainingTimeout = $"{minutes.ToPaddedString()}:{seconds.ToPaddedString()}";
        timer!.Enabled = true;
    }
}