<div id="periods" class="row">
    <div class="col-4">
        PERIOD
    </div>
    <div class="col-3"/>
    <div class="col-1 clickable" style="@GetBackgroundColor(1)" @onmousedown="@(_ => ChangePeriod(1))" @onmousedown:preventDefault="true">
        1
    </div>
    <div class="col-1 clickable" style="@GetBackgroundColor(2)" @onmousedown="@(_ => ChangePeriod(2))" @onmousedown:preventDefault="true">
        2
    </div>
    <div class="col-1 clickable" style="@GetBackgroundColor(3)" @onmousedown="@(_ => ChangePeriod(3))" @onmousedown:preventDefault="true">
        3
    </div>
    <div class="col-1 clickable" style="@GetBackgroundColor(4)" @onmousedown="@(_ => ChangePeriod(4))" @onmousedown:preventDefault="true">
        4
    </div>
    <div class="col-1 clickable ot-period" style="@GetBackgroundColor(5)" @onmousedown="@(_ => ChangePeriod(5))" @onmousedown:preventDefault="true">
        OT
    </div>
</div>

@code
{
    private byte currentPeriod = 1;

    [Parameter]
    public EventCallback OnPeriodManuallyChanged { get; set; }

    public void Next()
    {
        if (currentPeriod < 5) 
        {
            currentPeriod++;
            StateHasChanged();
        }
    }

    public void Reset()
    {
        currentPeriod = 1;
        StateHasChanged();
    }

    public bool IsLastPeriod => currentPeriod >= 4;

    private string GetBackgroundColor(byte period)
    {
        return period == currentPeriod
            ? "background-color: red;"
            : "";
    }

    private async void ChangePeriod(byte period)
    {
        if (currentPeriod != period)
        {
            currentPeriod = period;
            await OnPeriodManuallyChanged.InvokeAsync();
        }
    }
}