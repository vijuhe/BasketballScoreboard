@page "/"
@using BasketballScoreboard.Components
@inject IJSRuntime JSRuntime

<PageTitle>Basketball Scoreboard</PageTitle>

<Buzzer @ref="buzzer" />

<div class="row">
    <div class="col-1">
        <TeamFouls @ref="homeTeamFouls" />
    </div>
    <div id="remaining-time" @ref="remainingTimeContainer" tabindex="0" class="col-10" @onkeydown="ToggleTimer">
        <RemaningTime @ref="remainingTime" OnPeriodEnded="MoveToNextPeriodOrNewGameAfterPeriod" OnIntermissionEnded="MoveToNextPeriodAfterIntermission" />
    </div>
    <div class="col-1">
        <TeamFouls @ref="awayTeamFouls"/>
    </div>
</div>

<div id="timeout-and-period-row" class="row">
    <div class="col-1" />
    <div class="col-2">
        <Timeout OnTimeoutEnded="PlayBuzzer" />
    </div>
    <div class="col-1" />
    <div class="col-4">
        <Periods @ref="periods"/>
    </div>
    <div class="col-1" />
    <div class="col-2">
        <Timeout OnTimeoutEnded="PlayBuzzer" />
    </div>
    <div class="col-1" />
</div>

<div class="row">
    <div class="col-5">
        <TeamScore IsHomeTeam=true @ref="homeTeamScore" />
    </div>
    <div class="col-2">
        <BuzzerButton OnClick="PlayBuzzer" />
    </div>
    <div class="col-5">
        <TeamScore IsHomeTeam=false @ref="awayTeamScore" />
    </div>
</div>

@code
{
    private RemaningTime? remainingTime;
    private TeamFouls? homeTeamFouls;
    private TeamFouls? awayTeamFouls;
    private Periods? periods;
    private Buzzer? buzzer;
    private TeamScore? homeTeamScore;
    private TeamScore? awayTeamScore;
    private ElementReference? remainingTimeContainer;

    private void ToggleTimer(KeyboardEventArgs args)
    {
        remainingTime?.ToggleTimer();
    }

    private async void PlayBuzzer()
    {
        await buzzer!.Play();
    }

    private void MoveToNextPeriodAfterIntermission()
    {
        PlayBuzzer();
        remainingTime?.Reset();
    }

    private async void MoveToNextPeriodOrNewGameAfterPeriod()
    {
        string question = periods!.IsLastPeriod
            ? "Game ended.\nDo you want to get ready to start a new game?"
            : "Period ended.\nDo you want to start the intermission?\nCancelling moves to the next period without intermission.";
        PlayBuzzer();
        await Task.Delay(3000);
        bool confirmed = await JSRuntime.InvokeAsync<bool>("ask", question);

        if (periods.IsLastPeriod)
        {
            if (confirmed)
            {
                homeTeamFouls?.Reset();
                awayTeamFouls?.Reset();
                remainingTime?.Reset();
                periods.Reset();
                homeTeamScore?.Reset();
                awayTeamScore?.Reset();
            }
        }
        else
        {
            if (confirmed) remainingTime?.StartIntermission();
            else remainingTime?.Reset();
            homeTeamFouls?.Reset();
            awayTeamFouls?.Reset();
            periods.Next();
        }

        remainingTimeContainer?.FocusAsync();
    }
}