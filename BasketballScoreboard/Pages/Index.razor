@page "/"
@using BasketballScoreboard.Components
@inject IJSRuntime JSRuntime

<PageTitle>Basketball Scoreboard</PageTitle>

<Buzzer @ref="buzzer" />

<div class="row">
    <div class="col-1">
        <TeamFouls @ref="homeTeamFouls" />
    </div>
    <div id="remaining-time" tabindex="0" class="col-10" @onkeydown="ToggleTimer">
        <RemaningTime @ref="remainingTime" OnPeriodEnded="MoveToNextPeriodOrNewGame" />
    </div>
    <div class="col-1">
        <TeamFouls @ref="awayTeamFouls"/>
    </div>
</div>

<div id="timeout-and-period-row" class="row">
    <div class="col-1" />
    <div class="col-2">
        <Timeout OnTimeoutEnded="PlayBuzzer" />
    </div>
    <div class="col-1" />
    <div class="col-4">
        <Periods @ref="periods"/>
    </div>
    <div class="col-1" />
    <div class="col-2">
        <Timeout OnTimeoutEnded="PlayBuzzer" />
    </div>
    <div class="col-1" />
</div>

<div class="row">
    <div class="col-5">
        <TeamScore IsHomeTeam=true @ref="homeTeamScore" />
    </div>
    <div class="col-2" />
    <div class="col-5">
        <TeamScore IsHomeTeam=false @ref="awayTeamScore" />
    </div>
</div>

@code
{
    private RemaningTime? remainingTime;
    private TeamFouls? homeTeamFouls;
    private TeamFouls? awayTeamFouls;
    private Periods? periods;
    private Buzzer? buzzer;
    private TeamScore? homeTeamScore;
    private TeamScore? awayTeamScore;

    private void ToggleTimer(KeyboardEventArgs args)
    {
        remainingTime?.ToggleTimer();
    }

    private async void PlayBuzzer()
    {
        await buzzer!.Play();
    }

    private async void MoveToNextPeriodOrNewGame()
    {
        string question = periods!.IsLastPeriod
            ? "Game ended.\nDo you want to get ready to start a new game?"
            : "Period ended.\nDo you want to get ready to start the next period?";
        PlayBuzzer();
        await Task.Delay(5000);
        bool confirmed = await JSRuntime.InvokeAsync<bool>("ask", question);
        if (confirmed)
        {
            homeTeamFouls?.Reset();
            awayTeamFouls?.Reset();
            remainingTime?.Reset();

            if (periods.IsLastPeriod) 
            {
                periods.Reset();
                homeTeamScore?.Reset();
                awayTeamScore?.Reset();
            }
            else periods.Next();
        }
    }
}